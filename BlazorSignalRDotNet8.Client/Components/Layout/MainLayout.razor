@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR
@using BlazorDotNet8.Client.Hubs
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IHubContext<ChatHub> HubContext
@implements IAsyncDisposable
@inject ConnectionIdStateContainer ConnectionIdStateContainer

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On("GoToLogin", () =>
        {
            Navigation.NavigateTo("/", true);
            // await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        ConnectionIdStateContainer.OnChange += CreateUserConnection;
    }

    private void CreateUserConnection()
    {
        if (hubConnection is not null)
        {
            Task.Run(() => hubConnection.SendAsync("CreateUserConnection", ConnectionIdStateContainer.Data, "User"));
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }

        ConnectionIdStateContainer.OnChange -= StateHasChanged;
    }

}