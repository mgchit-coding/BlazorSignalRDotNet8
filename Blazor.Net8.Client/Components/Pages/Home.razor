@page "/home"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IDialogService DialogService
@inject NavigationManager _nav
@inject ISnackbar Snackbar

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("http://localhost:5090/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            // var encodedMsg = $"{user}: {message}";
            // messages.Add(encodedMsg);
            // InvokeAsync(StateHasChanged);
            Snackbar.Add($"{user},{message}", Severity.Info);
            _nav.NavigateTo("/");
            // Task.Run(() =>
            // {
            //     ShowDialog();
            // });
        });

        await hubConnection.StartAsync();
    }
    private async Task ShowDialog()
    {
        await InvokeAsync(() =>
        {
            var options = new DialogOptions { ClassBackground = "my-custom-class" };
            DialogService.Show<D_Logout>("Simple Dialog", options);
            _nav.NavigateTo("/");
        });
    }
    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}